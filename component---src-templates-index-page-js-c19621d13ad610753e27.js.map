{"version":3,"file":"component---src-templates-index-page-js-c19621d13ad610753e27.js","mappings":"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","sources":["webpack://gatsby-starter-netlify-cms/./src/components/BlogRoll.js","webpack://gatsby-starter-netlify-cms/./src/components/Features.js","webpack://gatsby-starter-netlify-cms/./src/components/FullWidthImage.js","webpack://gatsby-starter-netlify-cms/./src/templates/index-page.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql, StaticQuery } from 'gatsby'\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\n\n\nconst BlogRollTemplate = (props) => {\n  \n  const { edges: posts } = props.data.allMarkdownRemark;\n\n  return (\n    <div className=\"columns is-multiline\">\n      {posts &&\n        posts.map(({ node: post }) => (\n          <div className=\"is-parent column is-6\" key={post.id}>\n            <article\n              className={`blog-list-item tile is-child box notification ${\n                post.frontmatter.featuredpost ? 'is-featured' : ''\n              }`}\n            >\n              <header>\n                {post?.frontmatter?.featuredimage && (\n                  <div className=\"featured-thumbnail\">\n                    <PreviewCompatibleImage\n                      imageInfo={{\n                        image: post.frontmatter.featuredimage,\n                        alt: `featured image thumbnail for post ${post.frontmatter.title}`,\n                        width:\n                          post.frontmatter.featuredimage.childImageSharp\n                            .gatsbyImageData.width,\n                        height:\n                          post.frontmatter.featuredimage.childImageSharp\n                            .gatsbyImageData.height,\n                      }}\n                    />\n                  </div>\n                ) }\n                <p className=\"post-meta\">\n                  <Link\n                    className=\"title has-text-primary is-size-4\"\n                    to={post.fields.slug}\n                  >\n                    {post.frontmatter.title}\n                  </Link>\n                  <span> &bull; </span>\n                  <span className=\"subtitle is-size-5 is-block\">\n                    {post.frontmatter.date}\n                  </span>\n                </p>\n              </header>\n              <p>\n                {post.excerpt}\n                <br />\n                <br />\n                <Link className=\"button\" to={post.fields.slug}>\n                  Keep Reading â†’\n                </Link>\n              </p>\n            </article>\n          </div>\n        ))}\n    </div>\n  )\n}\n\nBlogRoll.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.array,\n    }),\n  }),\n}\n\n\nexport default function BlogRoll() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query BlogRollQuery {\n          allMarkdownRemark(\n            sort: { order: DESC, fields: [frontmatter___date] }\n            filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\n          ) {\n            edges {\n              node {\n                excerpt(pruneLength: 400)\n                id\n                fields {\n                  slug\n                }\n                frontmatter {\n                  title\n                  templateKey\n                  date(formatString: \"MMMM DD, YYYY\")\n                  featuredpost\n                  featuredimage {\n                    childImageSharp {\n                      gatsbyImageData(\n                        width: 120\n                        quality: 100\n                        layout: CONSTRAINED\n                      )\n\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={(data, count) => <BlogRollTemplate data={data} count={count} />}\n    />\n  );\n}\n","import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PreviewCompatibleImage from \"../components/PreviewCompatibleImage\";\n\nconst FeatureGrid = ({ gridItems }) => (\n  <div className=\"columns is-multiline\">\n    {gridItems.map((item) => (\n      <div key={item.text} className=\"column is-6\">\n        <section className=\"section\">\n          <div className=\"has-text-centered\">\n            <div\n              style={{\n                width: \"240px\",\n                display: \"inline-block\",\n              }}\n            >\n              <PreviewCompatibleImage imageInfo={item} />\n            </div>\n          </div>\n          <p>{item.text}</p>\n        </section>\n      </div>\n    ))}\n  </div>\n);\n\nFeatureGrid.propTypes = {\n  gridItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n      text: PropTypes.string,\n    })\n  ),\n};\n\nexport default FeatureGrid;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nexport default function FullWidthImage(props) {\n  const {\n    height = 400,\n    img,\n    title,\n    subheading,\n    imgPosition = \"top left\",\n  } = props;\n\n  return (\n    <React.Fragment>\n      <div\n        className=\"margin-top-0\"\n        style={{\n          display: \"grid\",\n          alignItems: \"center\",\n        }}\n      >\n        {img?.url ? (\n          <img\n            src={img}\n            objectFit={\"cover\"}\n            objectPosition={imgPosition}\n            style={{\n              gridArea: \"1/1\",\n              // You can set a maximum height for the image, if you wish.\n              height: height,\n              width: \"100%\",\n            }}\n            // This is a presentational image, so the alt should be an empty string\n            alt=\"\"\n          />\n        ) : (\n          <GatsbyImage\n            image={img}\n            objectFit={\"cover\"}\n            objectPosition={imgPosition}\n            style={{\n              gridArea: \"1/1\",\n              // You can set a maximum height for the image, if you wish.\n              maxHeight: height,\n            }}\n            layout=\"fullWidth\"\n            // You can optionally force an aspect ratio for the generated image\n            aspectratio={3 / 1}\n            // This is a presentational image, so the alt should be an empty string\n            alt=\"\"\n            formats={[\"auto\", \"webp\", \"avif\"]}\n          />\n        )}\n        {(title || subheading) && (\n          <div\n            style={{\n              // By using the same grid area for both, they are stacked on top of each other\n              gridArea: \"1/1\",\n              position: \"relative\",\n              // This centers the other elements inside the hero component\n              placeItems: \"center\",\n              display: \"grid\",\n            }}\n          >\n            {/* Any content here will be centered in the component */}\n            {title && (\n              <h1\n                className=\"has-text-weight-bold is-size-3-mobile is-size-2-tablet is-size-1-widescreen\"\n                style={{\n                  boxShadow:\n                    \"rgb(255, 68, 0) 0.5rem 0px 0px, rgb(255, 68, 0) -0.5rem 0px 0px\",\n                  backgroundColor: \"rgb(255, 68, 0)\",\n                  color: \"white\",\n                  lineHeight: \"1\",\n                  padding: \"0.25em\",\n                }}\n              >\n                {title}\n              </h1>\n            )}\n            {subheading && (\n              <h3\n                className=\"has-text-weight-bold is-size-5-mobile is-size-5-tablet is-size-4-widescreen\"\n                style={{\n                  boxShadow:\n                    \"rgb(255, 68, 0) 0.5rem 0px 0px, rgb(255, 68, 0) -0.5rem 0px 0px\",\n                  backgroundColor: \"rgb(255, 68, 0)\",\n                  color: \"white\",\n                  lineHeight: \"1\",\n                  padding: \"0.25rem\",\n                  marginTop: \"0.5rem\",\n                }}\n              >\n                {subheading}\n              </h3>\n            )}\n          </div>\n        )}\n      </div>\n    </React.Fragment>\n  );\n}\n\nFullWidthImage.propTypes = {\n  img: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  title: PropTypes.string,\n  height: PropTypes.number,\n  subheading: PropTypes.string,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link, graphql } from \"gatsby\";\nimport { getImage } from \"gatsby-plugin-image\";\n\nimport Layout from \"../components/Layout\";\nimport Features from \"../components/Features\";\nimport BlogRoll from \"../components/BlogRoll\";\nimport FullWidthImage from \"../components/FullWidthImage\";\n\n// eslint-disable-next-line\nexport const IndexPageTemplate = ({\n  image,\n  title,\n  heading,\n  subheading,\n  mainpitch,\n  description,\n  intro,\n}) => {\n  const heroImage = getImage(image) || image;\n\n  return (\n    <div>\n      <FullWidthImage img={heroImage} title={title} subheading={subheading} />\n      <section className=\"section section--gradient\">\n        <div className=\"container\">\n          <div className=\"section\">\n            <div className=\"columns\">\n              <div className=\"column is-10 is-offset-1\">\n                <div className=\"content\">\n                  <div className=\"content\">\n                    <div className=\"tile\">\n                      <h1 className=\"title\">{mainpitch.title}</h1>\n                    </div>\n                    <div className=\"tile\">\n                      <h3 className=\"subtitle\">{mainpitch.description}</h3>\n                    </div>\n                  </div>\n                  <div className=\"columns\">\n                    <div className=\"column is-12\">\n                      <h3 className=\"has-text-weight-semibold is-size-2\">\n                        {heading}\n                      </h3>\n                      <p>{description}</p>\n                    </div>\n                  </div>\n                  <Features gridItems={intro.blurbs} />\n                  <div className=\"columns\">\n                    <div className=\"column is-12 has-text-centered\">\n                      <Link className=\"btn\" to=\"/products\">\n                        See all products\n                      </Link>\n                    </div>\n                  </div>\n                  <div className=\"column is-12\">\n                    <h3 className=\"has-text-weight-semibold is-size-2\">\n                      Latest stories\n                    </h3>\n                    <BlogRoll />\n                    <div className=\"column is-12 has-text-centered\">\n                      <Link className=\"btn\" to=\"/blog\">\n                        Read more\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nIndexPageTemplate.propTypes = {\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  title: PropTypes.string,\n  heading: PropTypes.string,\n  subheading: PropTypes.string,\n  mainpitch: PropTypes.object,\n  description: PropTypes.string,\n  intro: PropTypes.shape({\n    blurbs: PropTypes.array,\n  }),\n};\n\nconst IndexPage = ({ data }) => {\n  const { frontmatter } = data.markdownRemark;\n\n  return (\n    <Layout>\n      <IndexPageTemplate\n        image={frontmatter.image}\n        title={frontmatter.title}\n        heading={frontmatter.heading}\n        subheading={frontmatter.subheading}\n        mainpitch={frontmatter.mainpitch}\n        description={frontmatter.description}\n        intro={frontmatter.intro}\n      />\n    </Layout>\n  );\n};\n\nIndexPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.object,\n    }),\n  }),\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query IndexPageTemplate {\n    markdownRemark(frontmatter: { templateKey: { eq: \"index-page\" } }) {\n      frontmatter {\n        title\n        image {\n          childImageSharp {\n            gatsbyImageData(quality: 100, layout: FULL_WIDTH)\n          }\n        }\n        heading\n        subheading\n        mainpitch {\n          title\n          description\n        }\n        description\n        intro {\n          blurbs {\n            image {\n              childImageSharp {\n                gatsbyImageData(width: 240, quality: 64, layout: CONSTRAINED)\n              }\n            }\n            text\n          }\n          heading\n          description\n        }\n      }\n    }\n  }\n`;\n"],"names":["BlogRollTemplate","props","posts","data","allMarkdownRemark","edges","className","map","post","node","key","id","frontmatter","featuredpost","featuredimage","imageInfo","image","alt","title","width","childImageSharp","gatsbyImageData","height","to","fields","slug","date","excerpt","BlogRoll","query","render","count","gridItems","item","text","style","display","FullWidthImage","img","subheading","imgPosition","alignItems","url","src","objectFit","objectPosition","gridArea","G","maxHeight","layout","aspectratio","formats","position","placeItems","boxShadow","backgroundColor","color","lineHeight","padding","marginTop","IndexPageTemplate","heading","mainpitch","description","intro","heroImage","getImage","blurbs","markdownRemark"],"sourceRoot":""}